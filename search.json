[{"title":"MySQL事务隔离级别原理","url":"https://sacharn.github.io/2021/03/20/MySQL事务隔离级别和实现原理/","content":"MySQL事务\nMySQL 事务都是指在 InnoDB 引擎下，因为MyISAM引擎是不支持事务的。\n数据库是指：一组数据操作，事务内的操作要么全部成功，要么全部失败。只要有一步失败，就要回滚所有操作。\n事务具有四个特性：ACID——原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）\n\n四大问题：什么是脏读、可重复读、不可重复读、幻读？\n脏读：读到了其他事务修改了但尚未提交的数据。这个事务的操作有可能发生回滚，那么就可能发生错误。\n可重复读：在一个事务内，从事务开始到事务结束，期间读到的同一批数据，始终是一致的。通常，针对数据更新（UPDATE）操作。\n不可重复读：在一个事务内，不同时刻读到的数据可能是不一致的。通常，针对数据更新（UPDATE）操作。\n幻读：幻读是针对插入（INSERT）操作来说的。假设事务A对某些⾏的内容作了更改，但是还未提交，此时事务B插⼊了与事务A更改前的记录相同的记录⾏，并且在事务A提交之前先提交了，⽽这时，在事务A中查询，会发现好像刚刚的更改对于某些数据未起作⽤，但其实是事务B刚插⼊进来的，让⽤户感觉很魔幻，感觉出现了幻觉，这就叫幻读。\n\n四大隔离级别：读未提交、读提交、可重复读、串行化\nMySQL的默认隔离级别是可重复读。\n\nMySQL 中执⾏事务：事务的执⾏过程如下，以 begin 或者 start transaction 开始，然后执⾏⼀系列操作，最后要执⾏ commit 操作，事务才算结束。当然，如果进⾏回滚操作(rollback)，事务也会结束。\n需要注意的是，begin 命令并不代表事务的开始，事务开始于 begin 命令之后的第⼀条语句执⾏的时候。例如下⾯⽰例中，\nselect * from xxx \n\n才是事务的开始。\nbegin; select * from xxx;  commit; -- 或者 rollback;\n\n\n\n1、读未提交MySQL 事务隔离其实是依靠锁来实现的，加锁自然会带来性能的损失。⽽读未提交隔离级别是不加锁的，所以它的性能是最好的，没有加锁、解锁带来的性能开销。但有利就有弊，这基本上就相当于裸奔啊，所以它连脏读的问题都没办法解决。\n读未提交，其实就是可以读到其他事务未提交的数据，但没有办法保证你读到的数据最终⼀定是提交后的数据，如果中间发⽣回滚，那就会出现脏数据问题，读未提交没办法解决脏数据问题。更别提可重复读和幻读了。\n2、读提交为了解决脏数据问题，就有了读提交隔离级别。读提交就是⼀个事务只能读到其他事务已经提交过的数据，也就是其他事务调⽤ commit 命令之后的数据。那脏数据问题迎刃而解了。\n但这也导致了⼀个问题，在同⼀事务中（事务B），事务的不同时刻，同样的查询条件，查询出来的记录内容是不⼀样的。事务A的提交影响了事务B的查询结果（事务A提交前数值为1，提交后数值为10），这就是不可重复读问题，也就是读提交隔离级别。\n3、可重复读为了解决不可重复读问题，就有了可重复读隔离级别。同时启动两个事务A、B，事务A修改某数据并提交，但是事务B并不受修改的影响，读取的仍然是事务A修改前的值。\n但这仍然存在一个问题，对于新插⼊的⾏记录，就没这么幸运了，幻读就这么产⽣了。\n其实，MySQL 的可重复读隔离级别其实解决了幻读问题\n4、串行化为了解决幻读问题，就有了串行化的隔离级别。串⾏化是4种事务隔离级别中隔离效果最好的，解决了脏读、可重复读、幻读的问题，但是效果最差，它将事务的执⾏变为顺序执⾏，与其他三个隔离级别相⽐，它就相当于单线程，后⼀个事务的执⾏必须等待前⼀个事务结束。\n\n\n","categories":[],"tags":[]},{"title":"流水的学生，铁打的修路","url":"https://sacharn.github.io/2021/03/20/流水的学生，铁打的修路/","content":"​    坊间传闻着一句话——“半年修一次，一次修半年”，说的就是学校永不停歇的修路工程。\n","categories":[],"tags":[]},{"title":"Hello World","url":"https://sacharn.github.io/2021/03/18/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","categories":[],"tags":[]}]